// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;
using namespace arma;

// objective_global
double objective_global(const mat& beta, const cube& x, const mat& y, const double lam1, const double lam2, const double lam3, const vec& w, const bool intercept);
RcppExport SEXP _sparseGFL_objective_global(SEXP betaSEXP, SEXP xSEXP, SEXP ySEXP, SEXP lam1SEXP, SEXP lam2SEXP, SEXP lam3SEXP, SEXP wSEXP, SEXP interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const cube& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type lam1(lam1SEXP);
    Rcpp::traits::input_parameter< const double >::type lam2(lam2SEXP);
    Rcpp::traits::input_parameter< const double >::type lam3(lam3SEXP);
    Rcpp::traits::input_parameter< const vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(objective_global(beta, x, y, lam1, lam2, lam3, w, intercept));
    return rcpp_result_gen;
END_RCPP
}
// objective_local
double objective_local(const vec& beta, const cube& x, const mat& y, const double lam1, const double lam2, const double lam3, const double wprev, const vec& bprev, const double wnext, const vec& bnext, const bool intercept);
RcppExport SEXP _sparseGFL_objective_local(SEXP betaSEXP, SEXP xSEXP, SEXP ySEXP, SEXP lam1SEXP, SEXP lam2SEXP, SEXP lam3SEXP, SEXP wprevSEXP, SEXP bprevSEXP, SEXP wnextSEXP, SEXP bnextSEXP, SEXP interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const cube& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type lam1(lam1SEXP);
    Rcpp::traits::input_parameter< const double >::type lam2(lam2SEXP);
    Rcpp::traits::input_parameter< const double >::type lam3(lam3SEXP);
    Rcpp::traits::input_parameter< const double >::type wprev(wprevSEXP);
    Rcpp::traits::input_parameter< const vec& >::type bprev(bprevSEXP);
    Rcpp::traits::input_parameter< const double >::type wnext(wnextSEXP);
    Rcpp::traits::input_parameter< const vec& >::type bnext(bnextSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(objective_local(beta, x, y, lam1, lam2, lam3, wprev, bprev, wnext, bnext, intercept));
    return rcpp_result_gen;
END_RCPP
}
// objective_blocks
double objective_blocks(const mat& beta, const cube& x, const mat& y, const double lam1, const double lam2, const double lam3, const vec& w, const double wprev, const vec& bprev, const double wnext, const vec& bnext, const bool intercept);
RcppExport SEXP _sparseGFL_objective_blocks(SEXP betaSEXP, SEXP xSEXP, SEXP ySEXP, SEXP lam1SEXP, SEXP lam2SEXP, SEXP lam3SEXP, SEXP wSEXP, SEXP wprevSEXP, SEXP bprevSEXP, SEXP wnextSEXP, SEXP bnextSEXP, SEXP interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const cube& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type lam1(lam1SEXP);
    Rcpp::traits::input_parameter< const double >::type lam2(lam2SEXP);
    Rcpp::traits::input_parameter< const double >::type lam3(lam3SEXP);
    Rcpp::traits::input_parameter< const vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const double >::type wprev(wprevSEXP);
    Rcpp::traits::input_parameter< const vec& >::type bprev(bprevSEXP);
    Rcpp::traits::input_parameter< const double >::type wnext(wnextSEXP);
    Rcpp::traits::input_parameter< const vec& >::type bnext(bnextSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(objective_blocks(beta, x, y, lam1, lam2, lam3, w, wprev, bprev, wnext, bnext, intercept));
    return rcpp_result_gen;
END_RCPP
}
// trivial_local
vec trivial_local(const vec& beta, const cube& x, const mat& y, const double lam1, const double lam2, const double lam3, const double wprev, const vec& bprev, const double wnext, const vec& bnext, const bool intercept, const double tol);
RcppExport SEXP _sparseGFL_trivial_local(SEXP betaSEXP, SEXP xSEXP, SEXP ySEXP, SEXP lam1SEXP, SEXP lam2SEXP, SEXP lam3SEXP, SEXP wprevSEXP, SEXP bprevSEXP, SEXP wnextSEXP, SEXP bnextSEXP, SEXP interceptSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const cube& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type lam1(lam1SEXP);
    Rcpp::traits::input_parameter< const double >::type lam2(lam2SEXP);
    Rcpp::traits::input_parameter< const double >::type lam3(lam3SEXP);
    Rcpp::traits::input_parameter< const double >::type wprev(wprevSEXP);
    Rcpp::traits::input_parameter< const vec& >::type bprev(bprevSEXP);
    Rcpp::traits::input_parameter< const double >::type wnext(wnextSEXP);
    Rcpp::traits::input_parameter< const vec& >::type bnext(bnextSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(trivial_local(beta, x, y, lam1, lam2, lam3, wprev, bprev, wnext, bnext, intercept, tol));
    return rcpp_result_gen;
END_RCPP
}
// trivial_mm
vec trivial_mm(const double lam1, const double lam2, const double L, const vec& z, const double wprev, const vec& bprev, const double wnext, const vec& bnext, const bool intercept, const uword N, const double tol);
RcppExport SEXP _sparseGFL_trivial_mm(SEXP lam1SEXP, SEXP lam2SEXP, SEXP LSEXP, SEXP zSEXP, SEXP wprevSEXP, SEXP bprevSEXP, SEXP wnextSEXP, SEXP bnextSEXP, SEXP interceptSEXP, SEXP NSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type lam1(lam1SEXP);
    Rcpp::traits::input_parameter< const double >::type lam2(lam2SEXP);
    Rcpp::traits::input_parameter< const double >::type L(LSEXP);
    Rcpp::traits::input_parameter< const vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const double >::type wprev(wprevSEXP);
    Rcpp::traits::input_parameter< const vec& >::type bprev(bprevSEXP);
    Rcpp::traits::input_parameter< const double >::type wnext(wnextSEXP);
    Rcpp::traits::input_parameter< const vec& >::type bnext(bnextSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const uword >::type N(NSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(trivial_mm(lam1, lam2, L, z, wprev, bprev, wnext, bnext, intercept, N, tol));
    return rcpp_result_gen;
END_RCPP
}
// fp1_vec
vec fp1_vec(vec beta, const double L, const vec& z, const double lam1, const double lam2, const double w, const vec& bprev, const bool intercept, const int N, const int maxit, const double tol);
RcppExport SEXP _sparseGFL_fp1_vec(SEXP betaSEXP, SEXP LSEXP, SEXP zSEXP, SEXP lam1SEXP, SEXP lam2SEXP, SEXP wSEXP, SEXP bprevSEXP, SEXP interceptSEXP, SEXP NSEXP, SEXP maxitSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double >::type L(LSEXP);
    Rcpp::traits::input_parameter< const vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const double >::type lam1(lam1SEXP);
    Rcpp::traits::input_parameter< const double >::type lam2(lam2SEXP);
    Rcpp::traits::input_parameter< const double >::type w(wSEXP);
    Rcpp::traits::input_parameter< const vec& >::type bprev(bprevSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(fp1_vec(beta, L, z, lam1, lam2, w, bprev, intercept, N, maxit, tol));
    return rcpp_result_gen;
END_RCPP
}
// fp2_vec
vec fp2_vec(vec beta, const double L, const vec& z, const double lam1, const double lam2, const double wprev, const vec& bprev, const double wnext, const vec& bnext, const bool intercept, const int N, const int maxit, const double tol);
RcppExport SEXP _sparseGFL_fp2_vec(SEXP betaSEXP, SEXP LSEXP, SEXP zSEXP, SEXP lam1SEXP, SEXP lam2SEXP, SEXP wprevSEXP, SEXP bprevSEXP, SEXP wnextSEXP, SEXP bnextSEXP, SEXP interceptSEXP, SEXP NSEXP, SEXP maxitSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double >::type L(LSEXP);
    Rcpp::traits::input_parameter< const vec& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const double >::type lam1(lam1SEXP);
    Rcpp::traits::input_parameter< const double >::type lam2(lam2SEXP);
    Rcpp::traits::input_parameter< const double >::type wprev(wprevSEXP);
    Rcpp::traits::input_parameter< const vec& >::type bprev(bprevSEXP);
    Rcpp::traits::input_parameter< const double >::type wnext(wnextSEXP);
    Rcpp::traits::input_parameter< const vec& >::type bnext(bnextSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(fp2_vec(beta, L, z, lam1, lam2, wprev, bprev, wnext, bnext, intercept, N, maxit, tol));
    return rcpp_result_gen;
END_RCPP
}
// FISTA_1
Rcpp::List FISTA_1(vec beta, const cube& x, const mat& y, const double lam1, const double lam2, const double lam3, const double wprev, const vec& bprev, const double wnext, const vec& bnext, const double L, const bool intercept, const uword maxit_fista, const double tol_fista, const uword maxit_fp, const double tol_fp, const double tol_equal);
RcppExport SEXP _sparseGFL_FISTA_1(SEXP betaSEXP, SEXP xSEXP, SEXP ySEXP, SEXP lam1SEXP, SEXP lam2SEXP, SEXP lam3SEXP, SEXP wprevSEXP, SEXP bprevSEXP, SEXP wnextSEXP, SEXP bnextSEXP, SEXP LSEXP, SEXP interceptSEXP, SEXP maxit_fistaSEXP, SEXP tol_fistaSEXP, SEXP maxit_fpSEXP, SEXP tol_fpSEXP, SEXP tol_equalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const cube& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type lam1(lam1SEXP);
    Rcpp::traits::input_parameter< const double >::type lam2(lam2SEXP);
    Rcpp::traits::input_parameter< const double >::type lam3(lam3SEXP);
    Rcpp::traits::input_parameter< const double >::type wprev(wprevSEXP);
    Rcpp::traits::input_parameter< const vec& >::type bprev(bprevSEXP);
    Rcpp::traits::input_parameter< const double >::type wnext(wnextSEXP);
    Rcpp::traits::input_parameter< const vec& >::type bnext(bnextSEXP);
    Rcpp::traits::input_parameter< const double >::type L(LSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const uword >::type maxit_fista(maxit_fistaSEXP);
    Rcpp::traits::input_parameter< const double >::type tol_fista(tol_fistaSEXP);
    Rcpp::traits::input_parameter< const uword >::type maxit_fp(maxit_fpSEXP);
    Rcpp::traits::input_parameter< const double >::type tol_fp(tol_fpSEXP);
    Rcpp::traits::input_parameter< const double >::type tol_equal(tol_equalSEXP);
    rcpp_result_gen = Rcpp::wrap(FISTA_1(beta, x, y, lam1, lam2, lam3, wprev, bprev, wnext, bnext, L, intercept, maxit_fista, tol_fista, maxit_fp, tol_fp, tol_equal));
    return rcpp_result_gen;
END_RCPP
}
// FISTA_M
List FISTA_M(mat beta, const cube& x, const mat& y, const double lam1, const double lam2, const double lam3, const vec& w, const bool intercept, uvec startc, uvec endc, double eta, const uword maxit, const double tol_fista, const double tol_equal);
RcppExport SEXP _sparseGFL_FISTA_M(SEXP betaSEXP, SEXP xSEXP, SEXP ySEXP, SEXP lam1SEXP, SEXP lam2SEXP, SEXP lam3SEXP, SEXP wSEXP, SEXP interceptSEXP, SEXP startcSEXP, SEXP endcSEXP, SEXP etaSEXP, SEXP maxitSEXP, SEXP tol_fistaSEXP, SEXP tol_equalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const cube& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type lam1(lam1SEXP);
    Rcpp::traits::input_parameter< const double >::type lam2(lam2SEXP);
    Rcpp::traits::input_parameter< const double >::type lam3(lam3SEXP);
    Rcpp::traits::input_parameter< const vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< uvec >::type startc(startcSEXP);
    Rcpp::traits::input_parameter< uvec >::type endc(endcSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const uword >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type tol_fista(tol_fistaSEXP);
    Rcpp::traits::input_parameter< const double >::type tol_equal(tol_equalSEXP);
    rcpp_result_gen = Rcpp::wrap(FISTA_M(beta, x, y, lam1, lam2, lam3, w, intercept, startc, endc, eta, maxit, tol_fista, tol_equal));
    return rcpp_result_gen;
END_RCPP
}
// grad_cpp
mat grad_cpp(const vec& beta, const cube& x, const mat& y, const double lam1, const double lam2, const double lam3, const double wprev, const vec& bprev, const double wnext, const vec& bnext, const bool intercept);
RcppExport SEXP _sparseGFL_grad_cpp(SEXP betaSEXP, SEXP xSEXP, SEXP ySEXP, SEXP lam1SEXP, SEXP lam2SEXP, SEXP lam3SEXP, SEXP wprevSEXP, SEXP bprevSEXP, SEXP wnextSEXP, SEXP bnextSEXP, SEXP interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const cube& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type lam1(lam1SEXP);
    Rcpp::traits::input_parameter< const double >::type lam2(lam2SEXP);
    Rcpp::traits::input_parameter< const double >::type lam3(lam3SEXP);
    Rcpp::traits::input_parameter< const double >::type wprev(wprevSEXP);
    Rcpp::traits::input_parameter< const vec& >::type bprev(bprevSEXP);
    Rcpp::traits::input_parameter< const double >::type wnext(wnextSEXP);
    Rcpp::traits::input_parameter< const vec& >::type bnext(bnextSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(grad_cpp(beta, x, y, lam1, lam2, lam3, wprev, bprev, wnext, bnext, intercept));
    return rcpp_result_gen;
END_RCPP
}
// pg_cpp
mat pg_cpp(const mat& z, const uvec& fixg, double lam1, double lam2, vec w, int maxit, double tol);
RcppExport SEXP _sparseGFL_pg_cpp(SEXP zSEXP, SEXP fixgSEXP, SEXP lam1SEXP, SEXP lam2SEXP, SEXP wSEXP, SEXP maxitSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mat& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const uvec& >::type fixg(fixgSEXP);
    Rcpp::traits::input_parameter< double >::type lam1(lam1SEXP);
    Rcpp::traits::input_parameter< double >::type lam2(lam2SEXP);
    Rcpp::traits::input_parameter< vec >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(pg_cpp(z, fixg, lam1, lam2, w, maxit, tol));
    return rcpp_result_gen;
END_RCPP
}
// compare_cols
LogicalVector compare_cols(const mat& x, const double tol);
RcppExport SEXP _sparseGFL_compare_cols(SEXP xSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(compare_cols(x, tol));
    return rcpp_result_gen;
END_RCPP
}
// all_equal
bool all_equal(const mat& x, const mat& y, const double tol);
RcppExport SEXP _sparseGFL_all_equal(SEXP xSEXP, SEXP ySEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(all_equal(x, y, tol));
    return rcpp_result_gen;
END_RCPP
}
// objective_global_svar
double objective_global_svar(const cube& A, const mat& x, const mat& y, const double lam1, const double lam2, const double lam3, const vec& w, const bool intercept);
RcppExport SEXP _sparseGFL_objective_global_svar(SEXP ASEXP, SEXP xSEXP, SEXP ySEXP, SEXP lam1SEXP, SEXP lam2SEXP, SEXP lam3SEXP, SEXP wSEXP, SEXP interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const cube& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type lam1(lam1SEXP);
    Rcpp::traits::input_parameter< const double >::type lam2(lam2SEXP);
    Rcpp::traits::input_parameter< const double >::type lam3(lam3SEXP);
    Rcpp::traits::input_parameter< const vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(objective_global_svar(A, x, y, lam1, lam2, lam3, w, intercept));
    return rcpp_result_gen;
END_RCPP
}
// objective_local_svar
double objective_local_svar(const mat& A, const mat& x, const mat& y, const double lam1, const double lam2, const double lam3, const double wprev, const mat& Aprev, const double wnext, const mat& Anext, const bool intercept);
RcppExport SEXP _sparseGFL_objective_local_svar(SEXP ASEXP, SEXP xSEXP, SEXP ySEXP, SEXP lam1SEXP, SEXP lam2SEXP, SEXP lam3SEXP, SEXP wprevSEXP, SEXP AprevSEXP, SEXP wnextSEXP, SEXP AnextSEXP, SEXP interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type lam1(lam1SEXP);
    Rcpp::traits::input_parameter< const double >::type lam2(lam2SEXP);
    Rcpp::traits::input_parameter< const double >::type lam3(lam3SEXP);
    Rcpp::traits::input_parameter< const double >::type wprev(wprevSEXP);
    Rcpp::traits::input_parameter< const mat& >::type Aprev(AprevSEXP);
    Rcpp::traits::input_parameter< const double >::type wnext(wnextSEXP);
    Rcpp::traits::input_parameter< const mat& >::type Anext(AnextSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(objective_local_svar(A, x, y, lam1, lam2, lam3, wprev, Aprev, wnext, Anext, intercept));
    return rcpp_result_gen;
END_RCPP
}
// objective_blocks_svar
double objective_blocks_svar(const cube& A, const mat& x, const mat& y, const double lam1, const double lam2, const double lam3, const vec& w, const double wprev, const mat& Aprev, const double wnext, const mat& Anext, const bool intercept);
RcppExport SEXP _sparseGFL_objective_blocks_svar(SEXP ASEXP, SEXP xSEXP, SEXP ySEXP, SEXP lam1SEXP, SEXP lam2SEXP, SEXP lam3SEXP, SEXP wSEXP, SEXP wprevSEXP, SEXP AprevSEXP, SEXP wnextSEXP, SEXP AnextSEXP, SEXP interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const cube& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type lam1(lam1SEXP);
    Rcpp::traits::input_parameter< const double >::type lam2(lam2SEXP);
    Rcpp::traits::input_parameter< const double >::type lam3(lam3SEXP);
    Rcpp::traits::input_parameter< const vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const double >::type wprev(wprevSEXP);
    Rcpp::traits::input_parameter< const mat& >::type Aprev(AprevSEXP);
    Rcpp::traits::input_parameter< const double >::type wnext(wnextSEXP);
    Rcpp::traits::input_parameter< const mat& >::type Anext(AnextSEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(objective_blocks_svar(A, x, y, lam1, lam2, lam3, w, wprev, Aprev, wnext, Anext, intercept));
    return rcpp_result_gen;
END_RCPP
}
// trivial_local_svar
mat trivial_local_svar(const mat& x, const mat& y, const double lam1, const double lam2, const double lam3, const double wprev, const mat& Aprev, const double wnext, const mat& Anext, const bool lag0, const bool intercept, const double tol);
RcppExport SEXP _sparseGFL_trivial_local_svar(SEXP xSEXP, SEXP ySEXP, SEXP lam1SEXP, SEXP lam2SEXP, SEXP lam3SEXP, SEXP wprevSEXP, SEXP AprevSEXP, SEXP wnextSEXP, SEXP AnextSEXP, SEXP lag0SEXP, SEXP interceptSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type lam1(lam1SEXP);
    Rcpp::traits::input_parameter< const double >::type lam2(lam2SEXP);
    Rcpp::traits::input_parameter< const double >::type lam3(lam3SEXP);
    Rcpp::traits::input_parameter< const double >::type wprev(wprevSEXP);
    Rcpp::traits::input_parameter< const mat& >::type Aprev(AprevSEXP);
    Rcpp::traits::input_parameter< const double >::type wnext(wnextSEXP);
    Rcpp::traits::input_parameter< const mat& >::type Anext(AnextSEXP);
    Rcpp::traits::input_parameter< const bool >::type lag0(lag0SEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(trivial_local_svar(x, y, lam1, lam2, lam3, wprev, Aprev, wnext, Anext, lag0, intercept, tol));
    return rcpp_result_gen;
END_RCPP
}
// trivial_mm_svar
mat trivial_mm_svar(const double lam1, const double lam2, const double L, const mat& Z, const double wprev, const mat& Aprev, const double wnext, const mat& Anext, const bool lag0, const bool intercept, const double tol);
RcppExport SEXP _sparseGFL_trivial_mm_svar(SEXP lam1SEXP, SEXP lam2SEXP, SEXP LSEXP, SEXP ZSEXP, SEXP wprevSEXP, SEXP AprevSEXP, SEXP wnextSEXP, SEXP AnextSEXP, SEXP lag0SEXP, SEXP interceptSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type lam1(lam1SEXP);
    Rcpp::traits::input_parameter< const double >::type lam2(lam2SEXP);
    Rcpp::traits::input_parameter< const double >::type L(LSEXP);
    Rcpp::traits::input_parameter< const mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const double >::type wprev(wprevSEXP);
    Rcpp::traits::input_parameter< const mat& >::type Aprev(AprevSEXP);
    Rcpp::traits::input_parameter< const double >::type wnext(wnextSEXP);
    Rcpp::traits::input_parameter< const mat& >::type Anext(AnextSEXP);
    Rcpp::traits::input_parameter< const bool >::type lag0(lag0SEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(trivial_mm_svar(lam1, lam2, L, Z, wprev, Aprev, wnext, Anext, lag0, intercept, tol));
    return rcpp_result_gen;
END_RCPP
}
// fp1_svar
mat fp1_svar(mat A, const double L, const mat& Z, const double lam1, const double lam2, const double w, const mat& Aprev, const bool lag0, const bool intercept, const int maxit, const double tol);
RcppExport SEXP _sparseGFL_fp1_svar(SEXP ASEXP, SEXP LSEXP, SEXP ZSEXP, SEXP lam1SEXP, SEXP lam2SEXP, SEXP wSEXP, SEXP AprevSEXP, SEXP lag0SEXP, SEXP interceptSEXP, SEXP maxitSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< const double >::type L(LSEXP);
    Rcpp::traits::input_parameter< const mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const double >::type lam1(lam1SEXP);
    Rcpp::traits::input_parameter< const double >::type lam2(lam2SEXP);
    Rcpp::traits::input_parameter< const double >::type w(wSEXP);
    Rcpp::traits::input_parameter< const mat& >::type Aprev(AprevSEXP);
    Rcpp::traits::input_parameter< const bool >::type lag0(lag0SEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(fp1_svar(A, L, Z, lam1, lam2, w, Aprev, lag0, intercept, maxit, tol));
    return rcpp_result_gen;
END_RCPP
}
// fp2_svar
mat fp2_svar(mat A, const double L, const mat& Z, const double lam1, const double lam2, const double wprev, const mat& Aprev, const double wnext, const mat& Anext, const bool lag0, const bool intercept, const int maxit, const double tol);
RcppExport SEXP _sparseGFL_fp2_svar(SEXP ASEXP, SEXP LSEXP, SEXP ZSEXP, SEXP lam1SEXP, SEXP lam2SEXP, SEXP wprevSEXP, SEXP AprevSEXP, SEXP wnextSEXP, SEXP AnextSEXP, SEXP lag0SEXP, SEXP interceptSEXP, SEXP maxitSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< const double >::type L(LSEXP);
    Rcpp::traits::input_parameter< const mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const double >::type lam1(lam1SEXP);
    Rcpp::traits::input_parameter< const double >::type lam2(lam2SEXP);
    Rcpp::traits::input_parameter< const double >::type wprev(wprevSEXP);
    Rcpp::traits::input_parameter< const mat& >::type Aprev(AprevSEXP);
    Rcpp::traits::input_parameter< const double >::type wnext(wnextSEXP);
    Rcpp::traits::input_parameter< const mat& >::type Anext(AnextSEXP);
    Rcpp::traits::input_parameter< const bool >::type lag0(lag0SEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(fp2_svar(A, L, Z, lam1, lam2, wprev, Aprev, wnext, Anext, lag0, intercept, maxit, tol));
    return rcpp_result_gen;
END_RCPP
}
// FISTA_1_svar
Rcpp::List FISTA_1_svar(mat A, const mat& x, const mat& y, const double lam1, const double lam2, const double lam3, double wprev, mat& Aprev, double wnext, mat& Anext, double L, const bool lag0, const bool intercept, const uword maxit_fista, const double tol_fista, const uword maxit_fp, const double tol_fp, const double tol_equal);
RcppExport SEXP _sparseGFL_FISTA_1_svar(SEXP ASEXP, SEXP xSEXP, SEXP ySEXP, SEXP lam1SEXP, SEXP lam2SEXP, SEXP lam3SEXP, SEXP wprevSEXP, SEXP AprevSEXP, SEXP wnextSEXP, SEXP AnextSEXP, SEXP LSEXP, SEXP lag0SEXP, SEXP interceptSEXP, SEXP maxit_fistaSEXP, SEXP tol_fistaSEXP, SEXP maxit_fpSEXP, SEXP tol_fpSEXP, SEXP tol_equalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< const mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type lam1(lam1SEXP);
    Rcpp::traits::input_parameter< const double >::type lam2(lam2SEXP);
    Rcpp::traits::input_parameter< const double >::type lam3(lam3SEXP);
    Rcpp::traits::input_parameter< double >::type wprev(wprevSEXP);
    Rcpp::traits::input_parameter< mat& >::type Aprev(AprevSEXP);
    Rcpp::traits::input_parameter< double >::type wnext(wnextSEXP);
    Rcpp::traits::input_parameter< mat& >::type Anext(AnextSEXP);
    Rcpp::traits::input_parameter< double >::type L(LSEXP);
    Rcpp::traits::input_parameter< const bool >::type lag0(lag0SEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const uword >::type maxit_fista(maxit_fistaSEXP);
    Rcpp::traits::input_parameter< const double >::type tol_fista(tol_fistaSEXP);
    Rcpp::traits::input_parameter< const uword >::type maxit_fp(maxit_fpSEXP);
    Rcpp::traits::input_parameter< const double >::type tol_fp(tol_fpSEXP);
    Rcpp::traits::input_parameter< const double >::type tol_equal(tol_equalSEXP);
    rcpp_result_gen = Rcpp::wrap(FISTA_1_svar(A, x, y, lam1, lam2, lam3, wprev, Aprev, wnext, Anext, L, lag0, intercept, maxit_fista, tol_fista, maxit_fp, tol_fp, tol_equal));
    return rcpp_result_gen;
END_RCPP
}
// FISTA_M_svar
List FISTA_M_svar(cube A, const mat& x, const mat& y, const double lam1, const double lam2, const double lam3, const vec& w, const bool lag0, const bool intercept, uvec startc, uvec endc, double eta, const uword maxit, const double tol_fista, const double tol_equal);
RcppExport SEXP _sparseGFL_FISTA_M_svar(SEXP ASEXP, SEXP xSEXP, SEXP ySEXP, SEXP lam1SEXP, SEXP lam2SEXP, SEXP lam3SEXP, SEXP wSEXP, SEXP lag0SEXP, SEXP interceptSEXP, SEXP startcSEXP, SEXP endcSEXP, SEXP etaSEXP, SEXP maxitSEXP, SEXP tol_fistaSEXP, SEXP tol_equalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< cube >::type A(ASEXP);
    Rcpp::traits::input_parameter< const mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type lam1(lam1SEXP);
    Rcpp::traits::input_parameter< const double >::type lam2(lam2SEXP);
    Rcpp::traits::input_parameter< const double >::type lam3(lam3SEXP);
    Rcpp::traits::input_parameter< const vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const bool >::type lag0(lag0SEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< uvec >::type startc(startcSEXP);
    Rcpp::traits::input_parameter< uvec >::type endc(endcSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const uword >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type tol_fista(tol_fistaSEXP);
    Rcpp::traits::input_parameter< const double >::type tol_equal(tol_equalSEXP);
    rcpp_result_gen = Rcpp::wrap(FISTA_M_svar(A, x, y, lam1, lam2, lam3, w, lag0, intercept, startc, endc, eta, maxit, tol_fista, tol_equal));
    return rcpp_result_gen;
END_RCPP
}
// grad_svar
mat grad_svar(const mat& A, const mat& x, const mat& y, const double lam1, const double lam2, const double lam3, const double wprev, const mat& Aprev, const double wnext, const mat& Anext, const bool lag0, const bool intercept);
RcppExport SEXP _sparseGFL_grad_svar(SEXP ASEXP, SEXP xSEXP, SEXP ySEXP, SEXP lam1SEXP, SEXP lam2SEXP, SEXP lam3SEXP, SEXP wprevSEXP, SEXP AprevSEXP, SEXP wnextSEXP, SEXP AnextSEXP, SEXP lag0SEXP, SEXP interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type lam1(lam1SEXP);
    Rcpp::traits::input_parameter< const double >::type lam2(lam2SEXP);
    Rcpp::traits::input_parameter< const double >::type lam3(lam3SEXP);
    Rcpp::traits::input_parameter< const double >::type wprev(wprevSEXP);
    Rcpp::traits::input_parameter< const mat& >::type Aprev(AprevSEXP);
    Rcpp::traits::input_parameter< const double >::type wnext(wnextSEXP);
    Rcpp::traits::input_parameter< const mat& >::type Anext(AnextSEXP);
    Rcpp::traits::input_parameter< const bool >::type lag0(lag0SEXP);
    Rcpp::traits::input_parameter< const bool >::type intercept(interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(grad_svar(A, x, y, lam1, lam2, lam3, wprev, Aprev, wnext, Anext, lag0, intercept));
    return rcpp_result_gen;
END_RCPP
}
// compare_slices
LogicalVector compare_slices(const cube& x, const double tol);
RcppExport SEXP _sparseGFL_compare_slices(SEXP xSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const cube& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(compare_slices(x, tol));
    return rcpp_result_gen;
END_RCPP
}
// AXY_elnet
List AXY_elnet(mat x, mat y, double lambda, double alpha, bool intercept, bool diag0, double eps, uword maxit);
RcppExport SEXP _sparseGFL_AXY_elnet(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP, SEXP alphaSEXP, SEXP interceptSEXP, SEXP diag0SEXP, SEXP epsSEXP, SEXP maxitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< bool >::type diag0(diag0SEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< uword >::type maxit(maxitSEXP);
    rcpp_result_gen = Rcpp::wrap(AXY_elnet(x, y, lambda, alpha, intercept, diag0, eps, maxit));
    return rcpp_result_gen;
END_RCPP
}
// lambda2_max
double lambda2_max(const mat& z, const uvec& fixg, double lam1, vec w, int maxit, double tol);
RcppExport SEXP _sparseGFL_lambda2_max(SEXP zSEXP, SEXP fixgSEXP, SEXP lam1SEXP, SEXP wSEXP, SEXP maxitSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mat& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const uvec& >::type fixg(fixgSEXP);
    Rcpp::traits::input_parameter< double >::type lam1(lam1SEXP);
    Rcpp::traits::input_parameter< vec >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(lambda2_max(z, fixg, lam1, w, maxit, tol));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sparseGFL_objective_global", (DL_FUNC) &_sparseGFL_objective_global, 8},
    {"_sparseGFL_objective_local", (DL_FUNC) &_sparseGFL_objective_local, 11},
    {"_sparseGFL_objective_blocks", (DL_FUNC) &_sparseGFL_objective_blocks, 12},
    {"_sparseGFL_trivial_local", (DL_FUNC) &_sparseGFL_trivial_local, 12},
    {"_sparseGFL_trivial_mm", (DL_FUNC) &_sparseGFL_trivial_mm, 11},
    {"_sparseGFL_fp1_vec", (DL_FUNC) &_sparseGFL_fp1_vec, 11},
    {"_sparseGFL_fp2_vec", (DL_FUNC) &_sparseGFL_fp2_vec, 13},
    {"_sparseGFL_FISTA_1", (DL_FUNC) &_sparseGFL_FISTA_1, 17},
    {"_sparseGFL_FISTA_M", (DL_FUNC) &_sparseGFL_FISTA_M, 14},
    {"_sparseGFL_grad_cpp", (DL_FUNC) &_sparseGFL_grad_cpp, 11},
    {"_sparseGFL_pg_cpp", (DL_FUNC) &_sparseGFL_pg_cpp, 7},
    {"_sparseGFL_compare_cols", (DL_FUNC) &_sparseGFL_compare_cols, 2},
    {"_sparseGFL_all_equal", (DL_FUNC) &_sparseGFL_all_equal, 3},
    {"_sparseGFL_objective_global_svar", (DL_FUNC) &_sparseGFL_objective_global_svar, 8},
    {"_sparseGFL_objective_local_svar", (DL_FUNC) &_sparseGFL_objective_local_svar, 11},
    {"_sparseGFL_objective_blocks_svar", (DL_FUNC) &_sparseGFL_objective_blocks_svar, 12},
    {"_sparseGFL_trivial_local_svar", (DL_FUNC) &_sparseGFL_trivial_local_svar, 12},
    {"_sparseGFL_trivial_mm_svar", (DL_FUNC) &_sparseGFL_trivial_mm_svar, 11},
    {"_sparseGFL_fp1_svar", (DL_FUNC) &_sparseGFL_fp1_svar, 11},
    {"_sparseGFL_fp2_svar", (DL_FUNC) &_sparseGFL_fp2_svar, 13},
    {"_sparseGFL_FISTA_1_svar", (DL_FUNC) &_sparseGFL_FISTA_1_svar, 18},
    {"_sparseGFL_FISTA_M_svar", (DL_FUNC) &_sparseGFL_FISTA_M_svar, 15},
    {"_sparseGFL_grad_svar", (DL_FUNC) &_sparseGFL_grad_svar, 12},
    {"_sparseGFL_compare_slices", (DL_FUNC) &_sparseGFL_compare_slices, 2},
    {"_sparseGFL_AXY_elnet", (DL_FUNC) &_sparseGFL_AXY_elnet, 8},
    {"_sparseGFL_lambda2_max", (DL_FUNC) &_sparseGFL_lambda2_max, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_sparseGFL(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
